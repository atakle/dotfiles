
" --- Basic settings --- {{{

" Use Vim settings, rather than Vi settings
set nocompatible

set nobackup       " do not keep a backup file
set autochdir      " set working directory as current file
set hidden         " allow hidden buffers

set number         " show line numbers
set relativenumber " show line numbers relative to the cursor position
set ruler          " show the cursor position all the time
set wrap           " wrap long lines
set linebreak      " break long lines at word boundary
set scrolloff=3    " keep 3 lines above and below the cursor

set title          " change the terminal's title
set showcmd        " display incomplete commands
set history=100    " keep 100 lines of command line history

set tabstop=4      " set tab width to 4 columns
set expandtab      " use spaces instead of tabs
set shiftwidth=4   " set indentation to 4 columns
set shiftround     " round indent to multiple of shiftwidth

set incsearch      " do incremental searching
set nohlsearch     " don't highlight search results
set gdefault       " replace with /g by default

set lazyredraw     " don't redraw the screen while running macros

" Wait for two seconds for multi-key commands
set timeoutlen=2000

" Don't overwrite the system clipboard when using visual mode
set clipboard-=autoselect

" What to keep in the viminfo file:
"   marks for 100 files
"   registers up to 1000 lines
"   registers containing up to 1000kb
set viminfo='100,<1000,s1000,h

if empty($XDG_CACHE_HOME)
    let $XDG_CACHE_HOME="$HOME/.cache"
endif
set viminfofile=$XDG_CACHE_HOME/vim/viminfo

set wildmode=list:full

" Turn off error bells
set noerrorbells visualbell t_vb=
if has('autocmd')
    autocmd GUIEnter * set visualbell t_vb=
endif

" Disable the .netrwhist file
let g:netrw_dirhistmax=0

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Don't insert double spaces after punctuation when using a join
" command
set nojoinspaces

" Use UTF-8 encoding
set encoding=utf8

" Use British English as the default language
set spelllang=en_gb

" Visually indicate certain characters
set list
set listchars=tab:Â»\ ,nbsp:\ ,trail:\ 

"  }}}


" --- Commands --- {{{

" Write files as root, when running vim as user
command! Rootwrite w !sudo tee % > /dev/null

if has("autocmd")

    " Enable file type detection and language-dependent indenting.
    filetype plugin indent on

    " Enable omnicompletion
    set omnifunc=syntaxcomplete#Complete

    augroup au_common
        autocmd!
        " When editing a file, always jump to the last known cursor position.
        " Don't do it when the position is invalid or when inside an event handler
        " (happens when dropping a file on gvim).
        " Also don't do it when the mark is in the first line, that is the default
        " position when opening a file.
        autocmd BufReadPost *
                    \ if line("'\"") > 1 && line("'\"") <= line("$") |
                    \   execute "normal! g`\"" |
                    \ endif
        " Don't add a comment leader when using o and O
        autocmd BufNewFile,BufRead * setlocal formatoptions-=o
    augroup END

else
    set autoindent    " always set autoindenting on
endif

" }}}


" --- Mappings --- {{{

let mapleader =  ","
nnoremap \ ,

" Escape from insert mode with jk
inoremap jk <esc>

" Add a new line without entering insert mode
nnoremap <leader>o o<esc>
nnoremap <leader>O O<esc>

" Copy to the end of the line with Y, instead of the whole line.
nnoremap Y y$

"Toggle hlsearch
nnoremap <leader>h  :set hlsearch!<cr>

" Center on search results
nnoremap n nzz
nnoremap N Nzz

" Quickly edit ~/.vimrc
nnoremap <leader>ev :split  $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" Switch between relative and absolute line numbering
if version < 704
    " Vim < 7.4 -- number and relativenumber cancel each other
    function! g:ToggleRelativeNumber()
        if ( &relativenumber )
            set number
        else
            set relativenumber
        endif
    endfunction
    nnoremap <silent> <leader>n :call g:ToggleRelativeNumber()<cr>
else
    " Vim >= 7.4 -- number changes the behaviour of relativenumber
    nnoremap <silent> <leader>n :set relativenumber!<cr>
endif

"toggle spelling
nnoremap <silent> <leader>sp :setlocal spell!<cr>

" Prevent accidentally opening the help screen
map <F1> <nop>

" Format a paragraph
nnoremap Q gwap
nnoremap <leader>Q Q

" Operator-pending mapping for sorting lines.
function! g:SortOperator(type)
    if a:type ==? 'v'
        execute "normal! `<V`>:sort\<cr>"
    elseif a:type ==# 'line'
        execute "normal! `[V`]:sort\<cr>"
    endif
endfunction
nnoremap <silent> <leader>= :set operatorfunc=SortOperator<cr>g@
vnoremap <silent> <leader>= :<c-u>call SortOperator(visualmode())<cr>

" Insert mode convert to upper-case
inoremap <C-u> <ESC>viwUea

" Remove trailing whitespace
nnoremap <silent> <leader>ds mt:%s/\s\+$//ge<cr>`t

" Toggle highlighting of trailing whitespace. For those files that
" contain lots of it, but are not ours to edit. This function expects
" ",trail: " to be the last element of listchars if it is present
function! g:ToggleListcharsTrail()
    let l:lcs   = &l:listchars
    if match(l:lcs, ",trail: $") != -1
        let l:lcs = substitute(l:lcs, ",trail: $", "", "")
    else
        let l:lcs = l:lcs . ",trail: "
    endif
    let &l:listchars = l:lcs
endfunction
nnoremap <silent> <leader>st :call g:ToggleListcharsTrail()<cr>

" Command line movement. Prepend the normal vim movement keys with the alt key
" to use them in command mode. The mappings for the terminal assumes that the
" alt-key sends an escape character.
if has("gui_running")
    cnoremap <M-H> <Left>
    cnoremap <M-L> <Right>
    cnoremap <M-B> <S-Left>
    cnoremap <M-W> <S-Right>
    cnoremap <M-0> <Home>
    cnoremap <M-A> <Home>
    cnoremap <M-E> <End>
    cnoremap <M-X> <Delete>
else
    cnoremap <ESC>h <Left>
    cnoremap <ESC>l <Right>
    cnoremap <ESC>b <S-Left>
    cnoremap <ESC>w <S-Right>
    cnoremap <ESC>0 <Home>
    cnoremap <ESC>a <Home>
    cnoremap <ESC>e <End>
    cnoremap <ESC>x <Delete>
endif

" Type "normal" faster
cnoremap NN normal<space>

" Toggle paste mode
set pastetoggle=<F2>

" Prevent vim-seek from stealing the substitute key
let g:SeekKey = "<space>"

" Fix common typos
iabbrev lenght length
iabbrev widht width

" }}}


"  --- Colours and syntax highlighting --- {{{

" Make a feeble attempt to detect terminal colours
if match($TERM, "256") != -1 || match($TERM, "screen-bce") != -1
    set t_Co=256
endif

" Switch syntax highlighting on, when the terminal has colours
if &t_Co > 2 || has("gui_running")
    syntax on
    colorscheme herald
    " Show tab characters
    match Tabstop /\t\($\)\@!/

    " The highlight settings have to be reapplied for new windows
    if has("autocmd")
        augroup au_highlight
            autocmd!
            autocmd WinEnter * match Tabstop /\t\($\)\@!/
        augroup END
    endif
endif

" }}}


" --- GVim settings --- {{{

if has("gui_running")
    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
    set lines=62
    set columns=110
    set guicursor="a:blinkon0"
endif

" }}}


" --- Filetype-specific settings --- {{{

if has("autocmd")

  " --- C++ filetype settings --- {{{
  augroup filetype_cpp
      autocmd!
      autocmd FileType cpp setlocal comments-=://
      autocmd FileType cpp setlocal comments+=f://
  augroup END
  "  }}}


  " --- Java filetype settings --- {{{
  augroup filetype_java
      autocmd!
      autocmd FileType java iabbrev <buffer> sysout System.out.println
      autocmd FileType java nnoremap <buffer> <leader>c I//
      autocmd FileType java setlocal comments-=://
      autocmd FileType java setlocal comments+=f://
      autocmd FileType java
          \ if exists(":JavaImportMissing") |
          \   if !exists(":Jimport") |
          \     command-buffer Jimport JavaImportMissing |
          \   endif |
          \ endif
  augroup END
  " }}}


  " --- TeX filetype settings --- {{{

  " Use LaTeX highlighting by default
  let g:tex_flavor = "latex"
  " }}}


  " --- Text filetype settings --- {{{
  augroup filetype_txt
      autocmd!
      autocmd FileType text setlocal textwidth=78
      autocmd FileType text setlocal comments=fb:-,fb:*,fb:o
  augroup END
  "  }}}


  " --- Vimscript filetype settings --- {{{
  augroup filetype_vim
      autocmd!
      autocmd FileType vim setlocal foldlevelstart=0
      autocmd FileType vim setlocal foldmethod=marker
      autocmd FileType vim
        \ nnoremap <buffer> <leader>ss :source %<cr>
  augroup END
  "}}}

endif " has("autocmd")

" }}}
