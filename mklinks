#!/bin/sh

INFILE=""

opt_delete="false"
opt_dryrun="false"
opt_force="false"
opt_target="${HOME}"
opt_verbose="false"

DIR=$(dirname $(readlink -f "$0"))
PROGRAM="$(basename $0)"

USAGE="Usage: $PROGRAM [options] FILE

Create symbolic links to files in the dotfiles directory in the user's \${HOME}
directory as specified in FILE.

Options:
  -d, --delete      delete symlinks instead of creating them
      --dry-run     don't perform any actions (implies -v)
  -f, --force       remove existing destination files
  -h, --help        print this text and exit
  -t, --target=DIR  place links in DIR instead of \${HOME}
  -v, --verbose     print what's being done

The input FILE is expected to contain lines of the form \"TARGET LINK\". Blank
lines and lines beginning with # are ignored. TARGET specifies file names
relative to the dotfiles directory, and LINK specifies names relative to the
\${HOME} directory,
"

# Print the program name and a message to stderr.
err() {
    echo "$PROGRAM: $@" 1>&2
}

### Parse command line options ###

set -- $(getopt -u -l "delete,dry-run,force,help,target:,verbose" "dfht:v" "$@")

while [ $# -gt 0 ]
do
    case "$1" in
        -d | --delete)
            opt_delete="true"
            ;;
        --dry-run)
            opt_dryrun="true"
            opt_verbose="true"
            ;;
        -f | --force)
            opt_force="true"
            ;;
        -h | --help)
            echo -n "${USAGE}"
            exit 0
            ;;
        -t | --target)
            shift
            opt_target="$1"
            ;;
        -v | --verbose)
            opt_verbose="true"
            ;;
        --)
            shift; break
            ;;
        -*)
            err "Unrecognised option '$1'"
            exit 1
            ;;
        *)
            break
            ;;
    esac
    shift
done

### Make sure the input file is correctly specified ###

if [ $# -eq 0 ]; then
    # The input file is missing, exit with an error.
    err "No input file specified."
    exit 1
elif [ $# -gt 1 ]; then
    # We only accept one argument.
    echo -n "${USAGE}" 1>&2
    exit 1
else
    INFILE=$1
    # Check if we can read the input file.
    if [ ! -e ${INFILE} ]; then
        err "Could not open '${INFILE}'. No such file,"
        exit 1
    elif [ ! -r ${INFILE} ]; then
        err "No read permission for '${INFILE}'."
        exit 1
    fi
fi

# Run the given command.
run() {
    if [ "${opt_verbose}" = "true" ]; then
        echo "$@"
    fi

    if [ "${opt_dryrun}" = "true" ]; then
        return 0
    else
        $*
    fi
}

# Create a symlink.
mklink() {
    target=$1
    link=$2

    # ln -f will silently ignore directories. In that case we print a warning.
    if [ "${opt_force}" = "true" -a ! \( -h "${link}" \) -a -d "${link}" ]
    then
        err "Cannot overwrite '${link}'. Is a directory."
        continue
    fi

    # Create the link
    run ${LN} "${target}" "${link}"
}

# Delete a symlink.
rmlink() {
    link=$1

    if [ -h  "${link}" ]; then
        run rm -f "${link}"
    else
        err "'${link}' is not a symbolic link."
    fi
}

line=0
while read target link rest; do
    line=$((line+1))

    LN="ln -srn"
    if [ "${opt_force}" = "true" ]; then
        LN="${LN}f"
    fi

    ### Do some syntax checking on ${INFILE} ###

    # Ignore blank lines and comments.
    if [ -z "${target}" -o "${target#\#}" != "${target}" ]; then
        continue
    fi

    # Must specify exactly two files.
    if [ -z ${link} ]; then
        err "${INFILE}, line ${line}: missing link destination."
        exit 1
    fi
    if [ -n "${rest}" ]; then
        err "${INFILE}, line ${line}: unexpected token '${rest}'."
        exit 1
    fi

    target="${DIR}/${target}"
    link="${opt_target}/${link}"

    ###  Create or delete the links ####

    if [ "${opt_delete}" = "true" ]; then
        rmlink "${link}"
    else
        mklink "${target}" "${link}"
    fi

done < ${INFILE}
